테이블의 조건 변경시 (ex: unique, Foreign Key 등) yml에서 update를 create로 바꾼 뒤 실행해 줘야 한다. 단 모든 데이터가 삭제된다는 것을 유의해야 한다.

테이블 생성
	@id
		Primary Key 선언
	
	@GeneratedValue(strategy = GenerationType.IDENTITY)
		넘버링 전략 선택 - IDENTITY는 연결된 DBMS의 넘버링 전략 따라감
			넘버링 전략 - id에 값을 넣지 않고 insert할 때 id값 주는 방식
				MySQL - auto_increment : DB에 null값 id가 들어왔을 때 id값 세팅 
					주의) DB 실행 전에는 id값 알 수 없음
				Oracle - Sequence : 들어온 순서대로 숫자 배정
		
		GenerationType을 사용하려면 yml파일에서 jpa.hibernate.name.use-new-id-generator-mappings을 false로 해야했으나 spring 2.x부터 삭제
	
	@Column()
		어트리뷰트 생성, 여러 조건 설정 가능
			조건 ex) 	nullable = boolean		널값 사용 가능 여부
							length = int				최대 길이 설정
		
	@CreationTimestamp
		튜플 생성 시각 자동 설정
		
	@ColumnDefault()
		정수 값을 넣을시 (" 내용 ")
		string값 넣을시 (" ' 내용 ' ")	string은 ' ' 추가
		
	@Lob
		대용량의 데이터를 저장할 때 사용
			ex) 게시판 내용 저장할 때 섬머노트 라이브러리를 사용하면 String과 <html>테그를 섞어 디자인하여 저장하여 용량이 많음
			
	@RequestBody 
		- String 변수를 받아올 때 사용시
		- @RequestParam과 비슷한 역할
		
	@RestController
		사용자가 요청 -> 응답(데이터)
	@Controller
		사용자가 요청 -> 응답(HTML파일

외래키 생성
	
	@JoinColumn(name = "저장할 필드명") 
		해당 어노테이션이 있는 객체(조인 할 릴레이션)에 있는 @id값을 " "안에 작성한 필드 이름으로 저장한다.
			ex) Bread 안에 
			@JoinColumn(name ="userid") 
			private User userid;로 설정하면 Board 릴레이션 안에 User의 id값을 Board안 userid 어트리뷰트에 저장		
					
	1. 자바 - 오브젝트 저장 가능, DB - 오브젝트 저장 불가 -> 자바에서는 오브젝트로 생성
	
	2. 종류 - OneToOne, OneToMany, ManyToOne, ManyToMany
		(현 객체가 참조할 테이블에서 사용되는 빈도)TO(팜조할 테이블이 현재 테이블에서 사용되는 빈도)
		ex)board 클래스 내에서
			여러개의 게시글은 한 사람에 의해 쓰일 수 있다 -> ManyToOne		User참조
			하나의 게시글에는 여러개의 댓글이 달릴 수 있다. -> OneToMany	Reply참조
			
			@ManyToMany는 참조하는 클래스와 참조되는 클래스 사이를 잇는 테이블을 생성한다
			
	3. 연관관계 주인 - Foreign Key를 가진 오브젝트
	
	FK 생성
		private 객체명 객체명id	<- 객체 생성시 조인하라는 쿼리 실행
			ex) Board 객체 내에 private User userid;가 있다면 Board 객체가 select돌 시 JPA가 Board와 User를 조인하라는 쿼리를 생성하여 DB로 보내고 그 결과를 JPA가 받음
		주의점:
			@OneToMany인 경우에 @JoinColumn을 사용하면 외래키 튜플에 원자값이 아닌 집합이 들어가게 되어 도메인 제약조건을 위배한다
			@OneToMany는 @OneToMany(mappedBy="오브젝트 이름")을 통해 DBMS에게 FK 튜플을 만들지 말라고 선언한다
				정보 획득용 외래키 생성x
				
				@OneToMany 사용법
					Board 클래스 내
						@OneToMany(mappedBy="board") 
						private List<Reply> reply;
							mappedBy 이름은 Reply 클래스 내에서 Board를 생성할 때 사용한 객체 명 
								ex) private Board board; <-
			
		조인 조건 기본 세팅	
			
			@ManyToOne(fetch = FetchType.EAGER)
				Board 테이블 select시 무조건 유저 데이터 조인
			@OneToMany(mappedBy=" ", fetch = FetchType.LAZY)
				필요하면 가져오고 필요 없으면 가져오지 않는다.
				ex) 게시판에서 댓글 더보기를 누르면 댓글 가져올 경우에
				만약 항상 필요하면 EAGER로 변경해줘야 한다
			
			
	application.yml 설정
		jpa.hibernate.ddl-auto - 테이블 생성 방식 선택
			create	-	이미 있던 relation drop하고 create
			update - 이미 relation 존재하면 유지
			
	jpa.hibernate.format_sql
		콘솔 창에서 DB 작동 명령어 출력 여부
		
	jpa.hibernate.naming.physical-strategy: org.hibernate.boot.model.naming.(종류)
		종류
			1. PhysicalNamingStrategyStandardImpl
				변수명 그대로 테이블에 필드를 생성
				ex) myEmail -> myEmail

			2. SpringPhysicalNamingStrategy
				대문자 ->_소문자
				myEmail -> my_email

	어트리뷰트 생성시 고려할 점
		
		1. role값을 만들 때는 Enum을 사용하게 하는것이 좋음
			-managerrrrr같은 오타로 설정될 수 있기 때문에 Enum을 통해 도메인을 정하는 것이 좋음
			-도메인: 범위 설정 
				ex) 성별 도메인 - 남, 여
				
				
------------------------------------------------------------------------
userRepository = DBMS와 호스트 언어를 연결해주는 인터페이스. 기본적으로 제작되어 있는 인터페이스를 override하여 사용
Repository 설정
	
	public interface UserRepository extends JpaRepository<User,Integer> { //User table을 관리하는 repository이며 primary key 형식은 int다
	
}
-------------------------------------------------------------------


SQL 명령어(Insert, update, delete, select)

	웹 브라우저는 자바의 오브젝트를 인식할 수 없다. 따라서 스프링부트 내 MessageConverter가 
			자바 오브젝트를 웹 브라우저가 인식할 수 있는 json 형식으로 변환하여 전달한다. (자바 오브젝트 리턴시 MessageConverter -> Jackson 라이브러리 호출
	
	select
		
		1. 릴레이션에서 유저 정보 한개 가져오기
			User user = userRepository.findById(id).(new Supplier<IllegalArgumentException>() {
			@Override
			public IllegalArgumentException get() {
			return new IllegalArgumentException("해당 유저는 없습니다. id : " + id);}
		});
		
		2. 릴레이션 페이징하여 가져오기
			public List<User> pageList(@PageableDefault(size=2,sort="id",direction=Sort.Direction.DESC) Pageable pageable){
			Page<User> pagingUser = userRepository.findAll(pageable); //List->Page, .getContent()삭제
		
			if(pagingUser.isLast()) {}
			List<User> users = pagingUser.getContent();
			return users; 
			}
			
		3. 릴레이션 전부 가져오기
			public List<User> list(){
			return userRepository.findAll();	}
		
		예외처리 방식
			1. 노빠꾸 .get() user/4를 찾으면 만약에 db에서 못팢으면 user가 null이 됨 그렇게 되면 return null이 되면 프로그램에 문제가 생김 !오류
			2. findById(id).orElseGet(new Supplier<User>(){@Override public User Get(){}}; -> 빈(널) 오브젝트 생성 후 리턴
			3. .orElseThrow(new Supplier<IllegalArgumentException>() {@Overridepublic IllegalArgumentException get() {return new IllegalArgumentException("해당 유저는 없습니다. id : " + id);}}); -> exception 오브젝트 리턴
	
	delete
		@DeleteMapping("/dummy/user/{id}")
		public String delete(@PathVariable int id) {
			<
			User user = userRepository.findById(id).orElseThrow(new Supplier<IllegalArgumentException>() {
				@Override
				public IllegalArgumentException get() {
				return new IllegalArgumentException("삭제에 실패했습니다. 해당 id는 존재하지 않습니다. id : " + id);}
			}); 
			> 따로 추가한 부분. select를 한번 실행하여 존재 여부 검증		
			userRepository.deleteById(id);
			return "삭제 되었습니다. id: " + id;
		}
		
	update
		@Transactional //save없어도 저장이 된다 - 함수 종료시 자동 commit이 된다
		@PutMapping("dummy/user/{id}") //Put과 Get다르면 상관x
		public User updateUser(@PathVariable int id, @RequestBody User requestUser) { //json 데이터 요청 -> Java 오브젝트로 변환 (MessageConverter의 Jackson이 변환) 이때 사용되는 annotation은 @RequestBody
			System.out.println("id : " + id);
			System.out.println("password : " + requestUser.getPassword());
			System.out.println("email : " + requestUser.getEmail());
			
			User user = userRepository.findById(id).orElseThrow(()->{
			return new IllegalArgumentException("수정에 실패하였습니다.");});//자바 매개변수 안에 함수 불가
			user.setPassword(requestUser.getPassword());
			user.setEmail(requestUser.getEmail());
			
			//userRepository.save(user); //incert때 사용 하지만 다른 값들이 null로 변환됨으로 사용 잘 안함
			
			//더티 체킹 - 
			return user; // 업데이트 완료값 리턴
		}
		
		insert
			//매개변수 사용할 때 변수명을 같게 하든가(String username), 다르게하려면 @ReauestParam("username") String u가 가능
			@PostMapping("/dummy/join")
			public String join(User user) {
				System.out.println("id : " + user.getId());	//안들어가서 신경 x
				System.out.println("username : " +user.getUsername());
				System.out.println("password : " +user.getPassword());
				System.out.println("email : " + user.getEmail());
				System.out.println("role : " + user.getRole());
				System.out.println("createDate : " + user.getCreateDate()); //@CreationTimestamp 작동해서 자동으로 incert
				
				user.setRole(RoleType.USER);
				userRepository.save(user);
				return "회원 가입이 완료되었습니다.";
	}